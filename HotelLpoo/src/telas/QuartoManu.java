package telas;

import Quartos.*;
import gravacao.GravarArquivo;
import java.io.IOException;
import javax.swing.DefaultComboBoxModel;

public class QuartoManu extends javax.swing.JFrame {

    /**
     * Creates new form escolherQuarto
     */
    public QuartoManu(ListaQuarto quarto, int idServico) {
        //na tela anterior definimos um valor para cada metodo que sera chamado aqui
        //de acordo com o valor enviado na escolha do servico a ser feito, teremos um comportamento diferente
        //1- limpar, 2- trocar chuveiro, 3- absatecer toalhas, 4- chamar servico (Disponivel apenas para quartos confort e master)
        //5- limpar hidro (apenas para quartos que tenham hidro, 6- chamar mordom (apenas para quartos que tenham mordomo)
        this.quarto = quarto;
        initComponents();
        setLocationRelativeTo(null);
        this.idServico = idServico;
        switch(idServico){
            case 1:
                this.tituloServico.setText("Escolha o quarto a ser limpo");
                break;
            case 2:
                this.tituloServico.setText("Escolha o quarto que precisa um novo de chuveiro");
                break;
            case 3:
                this.tituloServico.setText("Escolha o quarto que precisa de toalhas");
                break;
            case 4:
                this.tituloServico.setText("Escolha o quarto que precisa de atendimento");
                break;
            case 5:
                this.tituloServico.setText("Escolha o quarto que a Hidro precisa ser limpa");
                break;
            case 6:
                this.tituloServico.setText("Escolha o quarto que precisa do Mordomo");
                break;
        }
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tituloServico = new javax.swing.JLabel();
        botaoAcao = new javax.swing.JToggleButton();
        botaoVoltar = new javax.swing.JToggleButton();
        escolherQuarto = new javax.swing.JComboBox<>();
        msgErro = new javax.swing.JLabel();
        labelQuarto = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tituloServico.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        tituloServico.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        botaoAcao.setText("Solicitar");
        botaoAcao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoAcaoActionPerformed(evt);
            }
        });

        botaoVoltar.setText("Voltar");
        botaoVoltar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoVoltarActionPerformed(evt);
            }
        });

        escolherQuarto.setModel(new DefaultComboBoxModel(this.quarto.quartoNums()));

        msgErro.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        labelQuarto.setText("Quartos");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(botaoVoltar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(tituloServico, javax.swing.GroupLayout.PREFERRED_SIZE, 367, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(119, 119, 119)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(botaoAcao, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(labelQuarto, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(27, 27, 27)
                                .addComponent(escolherQuarto, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(msgErro, javax.swing.GroupLayout.PREFERRED_SIZE, 390, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(24, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(botaoVoltar))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(tituloServico, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(escolherQuarto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelQuarto))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)
                .addComponent(botaoAcao)
                .addGap(38, 38, 38)
                .addComponent(msgErro, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void botaoVoltarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoVoltarActionPerformed
        this.dispose();
    }//GEN-LAST:event_botaoVoltarActionPerformed

    private void botaoAcaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoAcaoActionPerformed
        int numQ = this.escolherQuarto.getSelectedIndex();
        
        switch(this.idServico){
            case 1:
                this.quarto.getQuarto(numQ).limpar();
                gravar(this.quarto);
                this.dispose();
                break;
            case 2:
                this.quarto.getQuarto(numQ).TrocarChuveiro();
                gravar(this.quarto);
                this.dispose();
                break;
            case 3:
                this.quarto.getQuarto(numQ).AbastecerToalha();
                gravar(this.quarto);
                this.dispose();
                break;
            case 4:
                if(this.quarto.getQuarto(numQ) instanceof QuartoConfort quartoConfort){
                    quartoConfort.chamarServico();
                    gravar(this.quarto);
                    this.dispose();
                } else {
                    this.msgErro.setText("Esse serviço não está disponível para esse quarto");
                }
                break;

            case 5:
                if(this.quarto.getQuarto(numQ) instanceof QuartoConfort quartoConfort && quartoConfort.isHidro()){
                    quartoConfort.limparHidro();
                    gravar(this.quarto);
                    this.dispose();
                } else {
                    this.msgErro.setText("Esse serviço não está disponível para esse quarto");
                }
                break;
            case 6:
                if(this.quarto.getQuarto(numQ) instanceof QuartoMaster quartoMaster && quartoMaster.isMordomo()){
                    quartoMaster.chamarMordomo();
                    gravar(this.quarto);
                    this.dispose();
                } else {
                    this.msgErro.setText("Esse serviço não está disponível para esse quarto");
                }
                break;
        }
    }//GEN-LAST:event_botaoAcaoActionPerformed

    /**
     * @param args the command line arguments
     */
    
    private ListaQuarto quarto;
    private int idServico;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton botaoAcao;
    private javax.swing.JToggleButton botaoVoltar;
    private javax.swing.JComboBox<String> escolherQuarto;
    private javax.swing.JLabel labelQuarto;
    private javax.swing.JLabel msgErro;
    private javax.swing.JLabel tituloServico;
    // End of variables declaration//GEN-END:variables
    
    private void gravar(ListaQuarto list) {
        GravarArquivo gravar;
            try {
                gravar = new GravarArquivo("quartos.txt");
                gravar.grava(list.toString());
                gravar.fecha();
                this.dispose();
            } catch (IOException ex) {
                this.msgErro.setText("Nao foi possivel salvar");
                this.msgErro.setVisible(true);
            }
    }

}
